[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "voice-bridge-pathology"
version = "1.0.0"
description = "Medical voice recognition system for pathology professionals using Azure Cognitive Services and Claude Desktop integration"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Voice Bridge Development Team", email = "voice-bridge@medical-ai.org"},
]
maintainers = [
    {name = "Voice Bridge Development Team", email = "voice-bridge@medical-ai.org"},
]
keywords = [
    "medical",
    "pathology", 
    "voice-recognition",
    "speech-to-text",
    "azure-cognitive-services",
    "claude-desktop",
    "healthcare",
    "dictation",
    "medical-transcription",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Medical Science Apps",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Environment :: X11 Applications",
    "Natural Language :: Spanish",
    "Natural Language :: English",
]

dependencies = [
    "azure-cognitiveservices-speech==1.34.0",
    "PyAutoGUI>=0.9.54",
    "pynput>=1.7.6",
    "requests>=2.31.0",
    "urllib3>=2.0.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.5.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
audio = [
    "pyaudio>=0.2.11",
]
monitoring = [
    "psutil>=5.9.0",
    "colorlog>=6.7.0",
]

[project.urls]
Homepage = "https://github.com/voice-bridge/voice-bridge-pathology"
Documentation = "https://github.com/voice-bridge/voice-bridge-pathology/blob/main/README.md"
Repository = "https://github.com/voice-bridge/voice-bridge-pathology.git"
Issues = "https://github.com/voice-bridge/voice-bridge-pathology/issues"
Changelog = "https://github.com/voice-bridge/voice-bridge-pathology/blob/main/CHANGELOG.md"

[project.scripts]
voice-bridge-pathology = "voice_bridge_app:main"

# ==========================================
# Hatchling Build Configuration
# ==========================================

[tool.hatchling.build.targets.wheel]
packages = ["voice_bridge_app.py"]

[tool.hatchling.build.targets.sdist]
include = [
    "/voice_bridge_app.py",
    "/README.md",
    "/LICENSE.md",
    "/CHANGELOG.md",
    "/examples/",
    "/config/",
]

# ==========================================
# Development Tools Configuration
# ==========================================

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.venv
  | \.env
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/.venv/*", "*/build/*", "*/dist/*"]

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".env",
    "build",
    "dist",
    "*.egg-info",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Medical code may use dynamic typing
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "azure.*",
    "pyautogui",
    "pynput.*",
    "tkinter.*",
]
ignore_missing_imports = true

# ==========================================
# Testing Configuration
# ==========================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=voice_bridge_app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = [
    "tests",
]
markers = [
    "unit: Unit tests that don't require external services",
    "integration: Integration tests that require Azure services",
    "ui: Tests that require GUI components",
    "slow: Slow tests that take more than 10 seconds",
    "medical: Tests specific to medical functionality",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["voice_bridge_app"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# ==========================================
# UV Package Manager Configuration
# ==========================================

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.5.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
]

# ==========================================
# Medical-Specific Configuration
# ==========================================

[tool.voice-bridge]
# Custom configuration section for Voice Bridge specific settings
medical_mode = true
default_language = "es-CO"
supported_languages = ["es-CO", "es-ES", "en-US"]
medical_dictionaries = [
    "patologia_molecular.txt",
    "frases_completas.txt",
]
azure_regions = [
    "eastus",
    "westus2", 
    "westeurope",
    "southeastasia",
]

[tool.voice-bridge.security]
# Security and compliance settings
hipaa_compliance = true
audit_logging = true
data_encryption = true
max_session_duration = 480  # 8 hours in minutes

[tool.voice-bridge.performance]
# Performance optimization settings
max_recognition_sessions = 1
audio_buffer_size = 100
memory_limit_mb = 50
cpu_usage_limit = 80

# ==========================================
# Environment Configuration
# ==========================================

[tool.setuptools-scm]
write_to = "_version.py"
version_scheme = "post-release"
local_scheme = "dirty-tag"

# ==========================================
# Documentation Configuration
# ==========================================

[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "myst_parser",
]

# ==========================================
# Packaging Configuration
# ==========================================

[tool.setuptools.packages.find]
where = ["."]
include = ["voice_bridge_app*"]
exclude = ["tests*", "examples*"]

[tool.setuptools.package-data]
voice_bridge_app = [
    "config/*.ini",
    "config/diccionarios/*.txt",
    "assets/*.png",
    "scripts/*.sh",
]

# ==========================================
# Deployment Configuration
# ==========================================

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "black",
    "isort",
    "flake8",
    "mypy",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=voice_bridge_app {args:tests}"
format = ["black .", "isort ."]
lint = ["flake8 .", "mypy ."]
check = ["format", "lint", "test-cov"]

[tool.hatch.envs.docs]
dependencies = [
    "sphinx",
    "sphinx-rtd-theme",
    "myst-parser",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs docs/_build/html"
serve = "python -m http.server 8000 --directory docs/_build/html"

# ==========================================
# Repository Configuration
# ==========================================

[tool.ruff]
line-length = 100
target-version = "py38"
fix = true

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (medical code can be complex)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
